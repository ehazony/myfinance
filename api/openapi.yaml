openapi: 3.0.3
info:
  title: ''
  version: 0.0.0
paths:
  /api/month-tracking:
    get:
      operationId: api_month_tracking_retrieve
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /api/user_credentials/:
    get:
      operationId: api_user_credentials_retrieve
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
    post:
      operationId: api_user_credentials_create
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /api/user_goals/:
    post:
      operationId: api_user_goals_create
      tags:
      - api
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TagGoal'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TagGoal'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TagGoal'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagGoal'
          description: ''
  /api/users/:
    get:
      operationId: api_users_retrieve
      tags:
      - api
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /bank_info.*:
    get:
      operationId: bank_info.*_retrieve
      tags:
      - bank_info.*
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /dj-rest-auth/login/:
    post:
      operationId: dj_rest_auth_login_create
      description: |-
        Check the credentials and return the REST Token
        if the credentials are valid and authenticated.
        Calls Django Auth login method to register User ID
        in Django session framework

        Accept the following POST parameters: username, password
        Return the REST Framework Token Object's key.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Login'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Login'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Login'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
  /dj-rest-auth/logout/:
    post:
      operationId: dj_rest_auth_logout_create
      description: |-
        Calls Django logout method and delete the Token object
        assigned to the current User object.

        Accepts/Returns nothing.
      tags:
      - dj-rest-auth
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /dj-rest-auth/password/change/:
    post:
      operationId: dj_rest_auth_password_change_create
      description: |-
        Calls Django Auth SetPasswordForm save method.

        Accepts the following POST parameters: new_password1, new_password2
        Returns the success/fail message.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordChange'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordChange'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /dj-rest-auth/password/reset/:
    post:
      operationId: dj_rest_auth_password_reset_create
      description: |-
        Calls Django Auth PasswordResetForm save method.

        Accepts the following POST parameters: email
        Returns the success/fail message.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordReset'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordReset'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /dj-rest-auth/password/reset/confirm/:
    post:
      operationId: dj_rest_auth_password_reset_confirm_create
      description: |-
        Password reset e-mail link is confirmed, therefore
        this resets the user's password.

        Accepts the following POST parameters: token, uid,
            new_password1, new_password2
        Returns the success/fail message.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PasswordResetConfirm'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /dj-rest-auth/registration/:
    post:
      operationId: dj_rest_auth_registration_create
      description: |-
        Registers a new user.

        Accepts the following POST parameters: username, email, password1, password2.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Register'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Register'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Register'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
          description: ''
  /dj-rest-auth/registration/resend-email/:
    post:
      operationId: dj_rest_auth_registration_resend_email_create
      description: |-
        Resends another email to an unverified email.

        Accepts the following POST parameter: email.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendEmailVerification'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/ResendEmailVerification'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/ResendEmailVerification'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /dj-rest-auth/registration/verify-email/:
    post:
      operationId: dj_rest_auth_registration_verify_email_create
      description: |-
        Verifies the email associated with the provided key.

        Accepts the following POST parameter: key.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/VerifyEmail'
        required: true
      security:
      - tokenAuth: []
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestAuthDetail'
          description: ''
  /dj-rest-auth/user/:
    get:
      operationId: dj_rest_auth_user_retrieve
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - dj-rest-auth
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    put:
      operationId: dj_rest_auth_user_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetails'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/UserDetails'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/UserDetails'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
    patch:
      operationId: dj_rest_auth_user_partial_update
      description: |-
        Reads and updates UserModel fields
        Accepts GET, PUT, PATCH methods.

        Default accepted fields: username, first_name, last_name
        Default display fields: pk, username, email, first_name, last_name
        Read-only fields: pk, email

        Returns UserModel fields.
      tags:
      - dj-rest-auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUserDetails'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUserDetails'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUserDetails'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDetails'
          description: ''
  /month_category.*:
    get:
      operationId: month_category.*_retrieve
      tags:
      - month_category.*
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /summery_widgets.*:
    get:
      operationId: summery_widgets.*_retrieve
      tags:
      - summery_widgets.*
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /total_month_expenses.*:
    get:
      operationId: total_month_expenses.*_retrieve
      tags:
      - total_month_expenses.*
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
  /user_accounts/:
    get:
      operationId: user_accounts_list
      tags:
      - user_accounts
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Credential'
          description: ''
    post:
      operationId: user_accounts_create
      tags:
      - user_accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credential'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Credential'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Credential'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential'
          description: ''
  /user_accounts/{id}/:
    get:
      operationId: user_accounts_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - user_accounts
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential'
          description: ''
    put:
      operationId: user_accounts_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - user_accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credential'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Credential'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Credential'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential'
          description: ''
    patch:
      operationId: user_accounts_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - user_accounts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedCredential'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedCredential'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedCredential'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Credential'
          description: ''
    delete:
      operationId: user_accounts_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - user_accounts
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /user_recurring_transactions/:
    get:
      operationId: user_recurring_transactions_list
      tags:
      - user_recurring_transactions
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RecurringTransaction'
          description: ''
    post:
      operationId: user_recurring_transactions_create
      tags:
      - user_recurring_transactions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecurringTransaction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RecurringTransaction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RecurringTransaction'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringTransaction'
          description: ''
  /user_recurring_transactions/{id}/:
    get:
      operationId: user_recurring_transactions_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - user_recurring_transactions
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringTransaction'
          description: ''
    put:
      operationId: user_recurring_transactions_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - user_recurring_transactions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecurringTransaction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/RecurringTransaction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/RecurringTransaction'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringTransaction'
          description: ''
    patch:
      operationId: user_recurring_transactions_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - user_recurring_transactions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedRecurringTransaction'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedRecurringTransaction'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedRecurringTransaction'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecurringTransaction'
          description: ''
    delete:
      operationId: user_recurring_transactions_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - user_recurring_transactions
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /user_tags/:
    get:
      operationId: user_tags_list
      tags:
      - user_tags
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
          description: ''
    post:
      operationId: user_tags_create
      tags:
      - user_tags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tag'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Tag'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: ''
  /user_tags/{id}/:
    get:
      operationId: user_tags_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - user_tags
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: ''
    put:
      operationId: user_tags_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - user_tags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tag'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Tag'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Tag'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: ''
    patch:
      operationId: user_tags_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - user_tags
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTag'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTag'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTag'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
          description: ''
    delete:
      operationId: user_tags_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - user_tags
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /user_transactions/:
    get:
      operationId: user_transactions_list
      tags:
      - user_transactions
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TransactionRest'
          description: ''
    post:
      operationId: user_transactions_create
      tags:
      - user_transactions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TransactionRest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TransactionRest'
        required: true
      security:
      - tokenAuth: []
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionRest'
          description: ''
  /user_transactions/{id}/:
    get:
      operationId: user_transactions_retrieve
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - user_transactions
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionRest'
          description: ''
    put:
      operationId: user_transactions_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - user_transactions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TransactionRest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/TransactionRest'
        required: true
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionRest'
          description: ''
    patch:
      operationId: user_transactions_partial_update
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - user_transactions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTransactionRest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTransactionRest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTransactionRest'
      security:
      - tokenAuth: []
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionRest'
          description: ''
    delete:
      operationId: user_transactions_destroy
      parameters:
      - in: path
        name: id
        schema:
          type: string
        required: true
      tags:
      - user_transactions
      security:
      - tokenAuth: []
      responses:
        '204':
          description: No response body
  /user_transactions_names:
    get:
      operationId: user_transactions_names_retrieve
      tags:
      - user_transactions_names
      security:
      - tokenAuth: []
      responses:
        '200':
          description: No response body
components:
  schemas:
    Credential:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        company:
          type: string
        type:
          type: string
        last_scanned:
          type: string
          format: date
          nullable: true
        additional_info: {}
        balance:
          type: string
          readOnly: true
      required:
      - balance
      - company
      - id
      - type
    Login:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
      required:
      - password
    PasswordChange:
      type: object
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
      required:
      - new_password1
      - new_password2
    PasswordReset:
      type: object
      description: Serializer for requesting a password reset e-mail.
      properties:
        email:
          type: string
          format: email
      required:
      - email
    PasswordResetConfirm:
      type: object
      description: Serializer for confirming a password reset attempt.
      properties:
        new_password1:
          type: string
          maxLength: 128
        new_password2:
          type: string
          maxLength: 128
        uid:
          type: string
        token:
          type: string
      required:
      - new_password1
      - new_password2
      - token
      - uid
    PatchedCredential:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        company:
          type: string
        type:
          type: string
        last_scanned:
          type: string
          format: date
          nullable: true
        additional_info: {}
        balance:
          type: string
          readOnly: true
    PatchedRecurringTransaction:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 200
        date:
          type: string
          format: date
        value:
          type: number
          format: double
        user:
          type: integer
          nullable: true
        credential:
          type: integer
          nullable: true
    PatchedTag:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        key:
          type: string
          nullable: true
          maxLength: 128
        name:
          type: string
          maxLength: 128
        expense:
          type: boolean
        type:
          $ref: '#/components/schemas/TypeEnum'
        user:
          type: integer
          nullable: true
    PatchedTransactionRest:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        tag_name:
          type: string
          readOnly: true
        date:
          type: string
          format: date
        name:
          type: string
          maxLength: 200
        value:
          type: number
          format: double
        month:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        month_date:
          type: string
          format: date
          nullable: true
        bank:
          type: boolean
        identifier:
          type: string
          nullable: true
          maxLength: 64
        user:
          type: integer
          nullable: true
        credential:
          type: integer
          nullable: true
        tag:
          type: integer
          nullable: true
    PatchedUserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
    RecurringTransaction:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 200
        date:
          type: string
          format: date
        value:
          type: number
          format: double
        user:
          type: integer
          nullable: true
        credential:
          type: integer
          nullable: true
      required:
      - date
      - id
      - name
      - value
    Register:
      type: object
      properties:
        username:
          type: string
          maxLength: 150
          minLength: 1
        email:
          type: string
          format: email
        password1:
          type: string
          writeOnly: true
        password2:
          type: string
          writeOnly: true
      required:
      - email
      - password1
      - password2
    ResendEmailVerification:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
      - email
    RestAuthDetail:
      type: object
      properties:
        detail:
          type: string
          readOnly: true
      required:
      - detail
    Tag:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        key:
          type: string
          nullable: true
          maxLength: 128
        name:
          type: string
          maxLength: 128
        expense:
          type: boolean
        type:
          $ref: '#/components/schemas/TypeEnum'
        user:
          type: integer
          nullable: true
      required:
      - id
      - name
    TagGoal:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        value:
          type: number
          format: double
        user:
          type: integer
          nullable: true
        tag:
          type: integer
          nullable: true
      required:
      - id
      - value
    Token:
      type: object
      description: Serializer for Token model.
      properties:
        key:
          type: string
          maxLength: 40
      required:
      - key
    TransactionRest:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        tag_name:
          type: string
          readOnly: true
        date:
          type: string
          format: date
        name:
          type: string
          maxLength: 200
        value:
          type: number
          format: double
        month:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        month_date:
          type: string
          format: date
          nullable: true
        bank:
          type: boolean
        identifier:
          type: string
          nullable: true
          maxLength: 64
        user:
          type: integer
          nullable: true
        credential:
          type: integer
          nullable: true
        tag:
          type: integer
          nullable: true
      required:
      - date
      - id
      - name
      - tag_name
      - value
    TypeEnum:
      enum:
      - MONTHLY FIXED
      - PERIODIC
      - CONTINUOUS
      type: string
      description: |-
        * `MONTHLY FIXED` - MONTHLY FIXED
        * `PERIODIC` - PERIODIC
        * `CONTINUOUS` - CONTINUOUS
    UserDetails:
      type: object
      description: User model w/o password
      properties:
        pk:
          type: integer
          readOnly: true
          title: ID
        username:
          type: string
          description: Required. 150 characters or fewer. Letters, digits and @/./+/-/_
            only.
          pattern: ^[\w.@+-]+$
          maxLength: 150
        email:
          type: string
          format: email
          readOnly: true
          title: Email address
        first_name:
          type: string
          maxLength: 150
        last_name:
          type: string
          maxLength: 150
      required:
      - email
      - pk
      - username
    VerifyEmail:
      type: object
      properties:
        key:
          type: string
          writeOnly: true
      required:
      - key
  securitySchemes:
    tokenAuth:
      type: apiKey
      in: header
      name: Authorization
      description: Token-based authentication with required prefix "Token"
