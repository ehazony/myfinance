## Getting Started

### Backend (Django)

1. **Create and activate the virtual environment (if not already created):**
   ```sh
   python3 -m venv venv
   source venv/bin/activate
   ```

2. **Install backend dependencies:**
   ```sh
   # Base packages
   pip install --index-url https://pypi.org/simple -r requirements/base.txt

   # Only the ADK agent system (minimal Django + ADK deps)
   pip install --index-url https://pypi.org/simple -r requirements/adk.txt
   ```
   Additional requirement files live in the `requirements/` directory. Install
   `agents.txt`, `extras.txt` or `test.txt` as needed, or use `all.txt` to install
   everything.  The new `requirements/services/` directory contains per service
   requirement files (e.g. `core_api.txt`, `agent_service.txt`, etc.) which list
   only the packages needed for that service.

3. **Configure environment variables:**
   - Copy `.env` or `.env.prod` to the project root and set your database and other secrets as needed.

4. **Apply migrations:**
   ```sh
   python manage.py migrate
   ```

5. **Start the Django development server:**
   ```sh
   python manage.py runserver
   ```
   - The backend will be available at: http://127.0.0.1:8000/

### Modular Services

The repository is being refactored into smaller services located under the
`services/` directory. Each service has its own README and requirement file in
`requirements/services/`.  During migration you can still run the full project
from the root, but new deployments should install dependencies per service.

A shared package `finance_common` now includes SQLAlchemy versions of all core
Django models together with the `SessionLocal` factory for direct database
access. Services import these models to avoid duplicating ORM code during the
migration to a modular architecture.

---

### Frontend (React)

1. **Navigate to the frontend directory:**
   ```sh
   cd front/dashboard
   ```

2. **Install frontend dependencies:**
   ```sh
   npm install
   ```

3. **Start the frontend app:**
   ```sh
   npm start
   ```
   - The frontend will be available at: http://localhost:3000/

### FinanceAgent (Next.js/Expo)

The new FinanceAgent app is a modern, unified codebase for both web and mobile finance dashboards. It uses Next.js for the web frontend and Expo (React Native) for mobile, sharing most business logic and UI components.

- **Location:** `front/FinanceAgent`
- **Purpose:** Modern replacement for the old dashboard, supporting both web and mobile from a single codebase.
- **Web (Next.js):**
  - Install dependencies: `npm install` or `pnpm install`
  - Start dev server: `npm run dev` or `pnpm dev`
  - Runs at http://localhost:3000/
- **Mobile (Expo):**
  - Install dependencies: `npm install` or `pnpm install`
  - Start Expo: `npx expo start`
  - Use Expo Go app or an emulator to preview on your device.
- **See** `front/FinanceAgent/README.md` **for more details and advanced usage.**

### Mobile (React Native)

Run the following script **while network access is available** to bootstrap the
new React Native application using Expo and install all required packages:

```sh
./scripts/setup_mobile_app.sh
```

This will create a `mobile/` directory with the Expo project and install the
dependencies listed in `docs/react_native_migration.md`.

---

### Notes
- Ensure PostgreSQL is running and the database specified in `.env` exists.
- The backend and frontend can be started independently.
- For production, additional configuration may be required.
- The new FinanceAgent app (web/mobile) lives in `front/FinanceAgent`. See its README for details.
- `scripts/generate_manifest.py` builds `capability_manifest.json` from the
  agent prompts. Run it whenever you update intents or descriptions.

---

## Running the Bank Scraper

The bank scraper is integrated as a Django management command. It loads/scrapes transactions for the specified user, credential, and date range.

### Usage

```sh
python manage.py load_transactions [--start YYYY-MM-DD] [--end YYYY-MM-DD] [--username USERNAME] [--credential_id ID]
```

#### Parameters
- `--start YYYY-MM-DD` : (optional) Start date for transactions (default: first day of the end month)
- `--end YYYY-MM-DD`   : (optional) End date for transactions (default: today)
- `--username USERNAME`: (optional) Only load transactions for this username
- `--credential_id ID` : (optional) Only load transactions for this credential ID

You can use any combination of these parameters. If none are provided, the command will process all credentials for all users for the default date range.

### Examples

- Load all transactions for all users for the current month:
  ```sh
  python manage.py load_transactions
  ```

- Load transactions for a specific user for a specific date range:
  ```sh
  python manage.py load_transactions --username alice --start 2024-01-01 --end 2024-01-31
  ```

- Load transactions for a specific credential:
  ```sh
  python manage.py load_transactions --credential_id 5
  ```

## Running Tests

Install dependencies and run the test suite with pytest:

```sh
pip install -r requirements/all.txt
pytest
```

Tests run with plain `pytest`. Each service provides stubs or mocks for
external dependencies as needed.
