## Getting Started

### Backend (Django)

1. **Create and activate the virtual environment (if not already created):**
   ```sh
   python3 -m venv venv
   source venv/bin/activate
   ```

2. **Install backend dependencies:**
   ```sh
   pip install --index-url https://pypi.org/simple -r requirements.txt
   ```

3. **Configure environment variables:**
   - Copy `.env` or `.env.prod` to the project root and set your database and other secrets as needed.

4. **Apply migrations:**
   ```sh
   python manage.py migrate
   ```

5. **Start the Django development server:**
   ```sh
   python manage.py runserver
   ```
   - The backend will be available at: http://127.0.0.1:8000/

---

### Frontend (React)

1. **Navigate to the frontend directory:**
   ```sh
   cd front/dashboard
   ```

2. **Install frontend dependencies:**
   ```sh
   npm install
   ```

3. **Start the frontend app:**
   ```sh
   npm start
   ```
   - The frontend will be available at: http://localhost:3000/

---

### Notes
- Ensure PostgreSQL is running and the database specified in `.env` exists.
- The backend and frontend can be started independently.
- For production, additional configuration may be required.

---

## Running the Bank Scraper

The bank scraper is integrated as a Django management command. It loads/scrapes transactions for the specified user, credential, and date range.

### Usage

```sh
python manage.py load_transactions [--start YYYY-MM-DD] [--end YYYY-MM-DD] [--username USERNAME] [--credential_id ID]
```

#### Parameters
- `--start YYYY-MM-DD` : (optional) Start date for transactions (default: first day of the end month)
- `--end YYYY-MM-DD`   : (optional) End date for transactions (default: today)
- `--username USERNAME`: (optional) Only load transactions for this username
- `--credential_id ID` : (optional) Only load transactions for this credential ID

You can use any combination of these parameters. If none are provided, the command will process all credentials for all users for the default date range.

### Examples

- Load all transactions for all users for the current month:
  ```sh
  python manage.py load_transactions
  ```

- Load transactions for a specific user for a specific date range:
  ```sh
  python manage.py load_transactions --username alice --start 2024-01-01 --end 2024-01-31
  ```

- Load transactions for a specific credential:
  ```sh
  python manage.py load_transactions --credential_id 5
  ```

---

## Committing and Pushing Changes

To save your work and share it with others, use the following Git workflow:

1. **Stage your changes:**
   ```sh
   git add <file1> <file2> ...
   # or to add all changes:
   git add -A
   ```

2. **Commit your changes with a descriptive message:**
   ```sh
   git commit -m "Describe your changes here"
   ```

3. **Pull the latest changes from the remote (recommended if working in a team):**
   ```sh
   git pull
   ```

4. **Push your changes to the remote repository:**
   ```sh
   git push origin master
   ```

**Example:**
```sh
git add README
git commit -m "Update documentation with commit and push instructions"
git pull
git push origin master
```
