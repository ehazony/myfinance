"""
Django settings for finance project.

Generated by 'django-admin startproject' using Django 2.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import logging.config
import os

import boto3
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
# import django_heroku
from decouple import config
if config('AWS_PROFILE', None):
    boto3.setup_default_session(profile_name=config('AWS_PROFILE'))
GRID_ENDPOINT = config('GRID_ENDPOINT', default='http://testserver')
FRONT_ENDPOINT = config('FRONT_ENDPOINT', default='http://testserver')
DJANGO_ALLOW_ASYNC_UNSAFE = True
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
#
TEMPLATE_PATH = os.path.join(BASE_DIR, 'templates')
USERNAME_FIELD = 'email'
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_USERNAME_REQUIRED = False
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
TELEGRAM_BOT_TOKEN = "5329467010:AAHxFZ1czZGrHg7mR8c3I6yprVAQkZlKE3M"
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'u77=-x94+ytdsj&gryj&i8a7wpy!l80r8lbw4n_2@zf-#v1es7'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition

INSTALLED_APPS = [
    'myFinance.apps.MyfinanceConfig',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'graphos',
    'app',
    'core',
    'telegram_bot',
    'bootstrap_modal_forms',
    'bsmodals',
    'rest_framework',
    'rest_framework.authtoken',
    'dj_rest_auth',

    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'dj_rest_auth.registration',

    'corsheaders',
    'django_filters',

    'django_celery_results',
    'django_celery_beat',
    # 'session_security',
    'drf_spectacular',
]
INSTALLED_APPS += ['django_extensions']

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'],

    'DEFAULT_AUTHENTICATION_CLASSES': (
        # 'rest_framework.authentication.BasicAuthentication',  # default - may need to remove
        # 'rest_framework.authentication.SessionAuthentication',  # default - may need to remove
        'rest_framework.authentication.TokenAuthentication',  # token authentication to the api

        # 'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
    ),
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}
AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    # 'session_security.middleware.SessionSecurityMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware'
]

ROOT_URLCONF = 'finance.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATE_PATH],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'finance.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

# DATABASES = {
# 	'default': {
# 		'ENGINE': 'django.db.backends.sqlite3',
# 		'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
# 	}
# }

if os.environ.get("USE_SQLITE_FOR_TESTS") == "1":
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": ":memory:",
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            "NAME": config("DB_NAME", default="test"),
            "USER": config("DB_USER", default="test"),
            "PASSWORD": config("DB_PASSWORD", default="test"),
            'HOST': config("HOST", default="test"),
            'PORT': '5432',
        }
    }

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
#
#
STATICFILES_DIRS = [
    # BASE_DIR + "/static",
    os.path.join(BASE_DIR, "core/static"),
    os.path.join(BASE_DIR, "finance/static"),
]

# LOGIN_REDIRECT_URL = "home"  # Route defined in app/urls.py
# LOGOUT_REDIRECT_URL = "home"  # Route defined in app/urls.py
# django_heroku.settings(locals())


# LOGGING = {
# 	'version': 1,
# 	# The version number of our log
# 	'disable_existing_loggers': False,
# 	# django uses some of its own loggers for internal operations. In case you want to disable them just replace the False above with true.
# 	# A handler for WARNING. It is basically writing the WARNING messages into a file called WARNING.log
# 	'handlers': {
# 		'file': {
# 			'level': 'WARNING',
# 			'class': 'logging.FileHandler',
# 			'filename': os.path.join(BASE_DIR,  'file.log'),
# 		},
# 	},
# 	# A logger for WARNING which has a handler called 'file'. A logger can have multiple handler
# 	'loggers': {
# 		# notice the blank '', Usually you would put built in loggers like django or root here based on your needs
# 		'': {
# 			'handlers': ['file'], #notice how file variable is called in handler which has been defined above
# 			'level': 'DEBUG',
# 			'propagate': True,
# 		},
# 	},
# }


LOGGING_CONFIG = None  # This empties out Django's logging config
LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "%(asctime)s - %(name)s - %(levelname)s - %(funcName)s:%(lineno)d - %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
        "aws": {
            "format": "%(asctime)s - %(name)s - %(levelname)s - %(funcName)s:%(lineno)d - %(message)s",
            "datefmt": "%Y-%m-%d %H:%M:%S",
        },
    },
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "loggers": {
        # Default logger for any logger name
        "": {
            "level": "INFO",
            "handlers": ["console", ],
            "propagate": False,
        },
        # Logger for django server logs with django.server logger name
        "django.server": {
            "level": "DEBUG",
            "handlers": ["console", ],
            "propagate": False,
        },
        'celery': {
            'handlers': ['console'],
            'level': 'DEBUG',
            "propagate": False,

        },
        # Logger for 3rd party library to restrict unnecessary log statments by the library
        "azure": {"level": "ERROR", "handlers": ["console"], "propogate": False},
        # Detailed logs for the agents package
        "agents": {"handlers": ["console"], "level": "DEBUG", "propagate": False},
        "app.services.chat_service": {"handlers": ["console"], "level": "DEBUG", "propagate": False},
    },
}
logging.config.dictConfig(LOGGING)  # Finally replace our config in python logging

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True

KMS_FIELD_REGION = 'us-east-2'
KMS_FIELD_CACHE_SIZE = 500

CELERY_BROKER_URL = config('REDIS_ENDPOINT', default='redis://localhost:6379/0')
CELERY_RESULT_BACKEND = config('REDIS_ENDPOINT', default='redis://localhost:6379/0')
CELERY_TRACK_STARTED = True
CELERYD_LOG_FILE = os.path.join(BASE_DIR, 'celery.log')
CELERYD_LOG_LEVEL = "INFO"
CELERY_TASK_TIME_LIMIT = 36000
CELERY_TIMEZONE = 'UTC'
CELERY_ENABLE_UTC = True
CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers.DatabaseScheduler'

REST_AUTH_REGISTER_SERIALIZERS = {

    'REGISTER_SERIALIZER': 'app.serializers.CustomRegisterSerializer',
}

SITE_ID = 1
ACCOUNT_EMAIL_VERIFICATION = 'none'
# LOGIN_REDIRECT_URL = config('FRONT_ENDPOINT')
ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS = False

DEFAULT_TIME_FORMAT = '%Y-%m-%d'
